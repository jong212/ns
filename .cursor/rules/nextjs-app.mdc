---
description: Next.js 15.4.6 App Router 및 TypeScript 개발 가이드라인
globs: app/**/*.ts, app/**/*.tsx, components/**/*.tsx, lib/**/*.ts
alwaysApply: true
---

# Next.js App Router Guidelines

## **프로젝트 구조**

- **표준 디렉토리 구조**
  ```
  /app
    /api
      /feed/route.ts
      /cluster/[id]/route.ts
      /search/route.ts
    /components
      /ui
        Card.tsx
        ClusterView.tsx
        Header.tsx
        SearchBar.tsx
      /layout
        MainLayout.tsx
    /lib
      supabase.ts
      utils.ts
      types.ts
    /hooks
      useNews.ts
    page.tsx
    layout.tsx
    globals.css
  ```

## **API 라우트**

- **표준 API 응답 형식**
  ```typescript
  // ✅ DO: app/api/feed/route.ts
  import { NextRequest, NextResponse } from 'next/server';
  import { supabase } from '@/lib/supabase';

  export async function GET(request: NextRequest) {
    try {
      const { searchParams } = new URL(request.url);
      const cast = searchParams.get('cast');
      const from = searchParams.get('from');
      const to = searchParams.get('to');
      
      let query = supabase
        .from('articles')
        .select('*')
        .order('published_at', { ascending: false });
      
      if (cast) {
        query = query.contains('cast_members', [cast]);
      }
      
      if (from && to) {
        query = query.gte('published_at', from).lte('published_at', to);
      }
      
      const { data, error } = await query;
      
      if (error) {
        return NextResponse.json({ error: error.message }, { status: 500 });
      }
      
      return NextResponse.json({ 
        success: true, 
        data,
        total: data?.length || 0 
      });
    } catch (error) {
      return NextResponse.json({ error: '서버 오류' }, { status: 500 });
    }
  }
  ```

## **타입 정의**

- **공통 타입 (lib/types.ts)**
  ```typescript
  // ✅ DO: 중앙 집중화된 타입 정의
  export interface NewsArticle {
    id: string;
    title: string;
    article_url: string;
    source: string;
    published_at: string;
    thumbnail_url?: string;
    cluster_id?: string;
    summary?: string;
    keywords?: string[];
    cast_members?: string[];
    status?: string;
  }

  export interface NewsCluster {
    id: string;
    main_article: NewsArticle;
    related_articles: NewsArticle[];
  }

  export interface APIResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
    total?: number;
    message?: string;
  }
  ```

## **컴포넌트 개발**

- **클러스터 카드 컴포넌트**
  ```typescript
  // ✅ DO: components/ui/ClusterCard.tsx
  import { NewsCluster } from '@/lib/types';
  import { formatDistanceToNow } from 'date-fns';
  import { ko } from 'date-fns/locale';

  interface ClusterCardProps {
    cluster: NewsCluster;
    onClick?: (clusterId: string) => void;
  }

  export function ClusterCard({ cluster, onClick }: ClusterCardProps) {
    const { main_article, related_articles } = cluster;
    
    return (
      <div 
        className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow cursor-pointer"
        onClick={() => onClick?.(cluster.id)}
      >
        <h3 className="text-lg font-semibold mb-2">{main_article.title}</h3>
        <p className="text-gray-600 text-sm mb-3">{main_article.summary}</p>
        
        <div className="flex justify-between items-center text-sm text-gray-500">
          <span>{main_article.source}</span>
          <span>
            {formatDistanceToNow(new Date(main_article.published_at), { 
              addSuffix: true, 
              locale: ko 
            })}
          </span>
        </div>
        
        {related_articles.length > 0 && (
          <div className="mt-3 text-sm text-blue-600">
            관련 기사 {related_articles.length}개
          </div>
        )}
      </div>
    );
  }
  ```

## **Supabase 클라이언트**

- **클라이언트 설정 (lib/supabase.ts)**
  ```typescript
  // ✅ DO: 환경변수 기반 클라이언트 설정
  import { createClient } from '@supabase/supabase-js';

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

  export const supabase = createClient(supabaseUrl, supabaseAnonKey);
  ```

## **커스텀 훅**

- **뉴스 데이터 훅 (hooks/useNews.ts)**
  ```typescript
  // ✅ DO: 뉴스 데이터 관리 훅
  import { useState, useEffect } from 'react';
  import { NewsArticle, APIResponse } from '@/lib/types';

  interface UseNewsOptions {
    cast?: string;
    from?: string;
    to?: string;
  }

  export function useNews(options: UseNewsOptions = {}) {
    const [articles, setArticles] = useState<NewsArticle[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
      const fetchNews = async () => {
        try {
          setLoading(true);
          const params = new URLSearchParams();
          
          if (options.cast) params.set('cast', options.cast);
          if (options.from) params.set('from', options.from);
          if (options.to) params.set('to', options.to);
          
          const response = await fetch(`/api/feed?${params}`);
          const result: APIResponse<NewsArticle[]> = await response.json();
          
          if (result.success && result.data) {
            setArticles(result.data);
          } else {
            setError(result.error || '데이터를 불러올 수 없습니다');
          }
        } catch (err) {
          setError('네트워크 오류가 발생했습니다');
        } finally {
          setLoading(false);
        }
      };

      fetchNews();
    }, [options.cast, options.from, options.to]);

    return { articles, loading, error, refetch: fetchNews };
  }
  ```

## **스타일링 (Tailwind CSS)**

- **반응형 디자인**
  ```typescript
  // ✅ DO: 모바일 우선 반응형 클래스
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {/* 카드 컴포넌트들 */}
  </div>
  ```

- **다크 모드 지원**
  ```typescript
  // ✅ DO: 다크 모드 클래스 활용
  <div className="bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
    {/* 컨텐츠 */}
  </div>
  ```