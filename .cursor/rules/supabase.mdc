---
description: Supabase 통합 및 Edge Functions 개발 가이드라인
globs: supabase/functions/**/*.ts, app/lib/supabase.ts, **/*supabase*.ts
alwaysApply: true
---

# Supabase Development Guidelines

## **Edge Functions 개발**

- **함수 구조**
  ```typescript
  // ✅ DO: 표준 Edge Function 구조
  import "jsr:@supabase/functions-js/edge-runtime.d.ts";
  import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

  Deno.serve(async (req: Request) => {
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
    };

    if (req.method === 'OPTIONS') {
      return new Response('ok', { headers: corsHeaders });
    }

    try {
      // 로직 구현
      return new Response(JSON.stringify({ success: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    } catch (error) {
      console.error('Edge Function 오류:', error);
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  });
  ```

- **환경변수 접근**
  ```typescript
  // ✅ DO: 환경변수 안전하게 접근
  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
  const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
  
  // ❌ DON'T: API 키 하드코딩
  const apiKey = 'hard-coded-key'; // 절대 하지 말 것
  ```

## **데이터베이스 작업**

- **UPSERT 작업**
  ```typescript
  // ✅ DO: 중복 제거 후 UPSERT
  const uniqueData = deduplicateByUrl(allArticles);
  const { data, error } = await supabase
    .from('articles')
    .upsert(uniqueData, { onConflict: 'article_url' })
    .select();
  ```

- **에러 처리**
  ```typescript
  // ✅ DO: 상세한 에러 로깅
  if (error) {
    console.error('데이터베이스 오류:', error);
    return new Response(JSON.stringify({ 
      error: '데이터베이스 저장 실패', 
      details: error 
    }), { status: 500 });
  }
  ```

## **타입 정의**

- **뉴스 기사 타입**
  ```typescript
  // ✅ DO: 표준 뉴스 기사 인터페이스
  interface NewsArticle {
    id?: string;
    title: string;
    article_url: string;
    source: string;
    published_at: string;
    thumbnail_url?: string;
    cluster_id?: string;
    summary?: string;
    keywords?: string[];
    cast_members?: string[];
    status?: string;
    hash?: string;
  }
  ```

## **API 응답 형식**

- **성공 응답**
  ```typescript
  // ✅ DO: 일관된 성공 응답 형식
  return new Response(JSON.stringify({
    success: true,
    collected: number,
    saved: number,
    message: string
  }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' }
  });
  ```

- **에러 응답**
  ```typescript
  // ✅ DO: 일관된 에러 응답 형식
  return new Response(JSON.stringify({
    error: string,
    details?: any,
    code?: string
  }), {
    status: 500,
    headers: { 'Content-Type': 'application/json' }
  });
  ```