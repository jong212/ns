---
description: 데이터베이스 스키마 및 마이그레이션 가이드라인
globs: supabase/migrations/*.sql, **/*migration*.sql, **/*schema*.sql
alwaysApply: true
---

# Database Schema Guidelines

## **테이블 설계 원칙**

- **articles 테이블 표준**
  ```sql
  -- ✅ DO: 표준 articles 테이블 구조
  CREATE TABLE articles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    article_url TEXT UNIQUE NOT NULL,
    canonical_url TEXT,
    source TEXT,
    summary TEXT,
    thumbnail_url TEXT,
    author TEXT,
    published_at TIMESTAMPTZ,
    fetched_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    status TEXT DEFAULT 'pending',
    raw_meta JSONB,
    hash TEXT NOT NULL,
    
    -- 나는솔로 전용 컬럼
    cluster_id TEXT,
    keywords TEXT[],
    cast_members TEXT[]
  );
  ```

## **인덱스 전략**

- **필수 인덱스**
  ```sql
  -- ✅ DO: 성능 최적화를 위한 인덱스
  CREATE INDEX idx_articles_published_at ON articles(published_at);
  CREATE INDEX idx_articles_cluster_id ON articles(cluster_id);
  CREATE INDEX idx_articles_source ON articles(source);
  CREATE INDEX idx_articles_status ON articles(status);
  
  -- 배열 필드용 GIN 인덱스
  CREATE INDEX idx_articles_keywords ON articles USING GIN(keywords);
  CREATE INDEX idx_articles_cast_members ON articles USING GIN(cast_members);
  
  -- 전문 검색용 인덱스
  CREATE INDEX idx_articles_title_search ON articles USING GIN(to_tsvector('korean', title));
  CREATE INDEX idx_articles_summary_search ON articles USING GIN(to_tsvector('korean', summary));
  ```

## **제약조건**

- **데이터 무결성**
  ```sql
  -- ✅ DO: 중복 방지 및 데이터 검증
  ALTER TABLE articles 
  ADD CONSTRAINT articles_article_url_unique UNIQUE (article_url);
  
  ALTER TABLE articles 
  ADD CONSTRAINT articles_status_check 
  CHECK (status IN ('pending', 'collected', 'processed', 'archived', 'error'));
  
  ALTER TABLE articles 
  ADD CONSTRAINT articles_published_at_check 
  CHECK (published_at IS NULL OR published_at <= NOW());
  ```

## **마이그레이션 패턴**

- **안전한 컬럼 추가**
  ```sql
  -- ✅ DO: 기존 데이터에 영향 없는 컬럼 추가
  ALTER TABLE articles 
  ADD COLUMN IF NOT EXISTS cluster_id TEXT,
  ADD COLUMN IF NOT EXISTS keywords TEXT[],
  ADD COLUMN IF NOT EXISTS cast_members TEXT[];
  
  -- 기본값 설정 (필요한 경우)
  UPDATE articles SET keywords = ARRAY[]::TEXT[] WHERE keywords IS NULL;
  UPDATE articles SET cast_members = ARRAY[]::TEXT[] WHERE cast_members IS NULL;
  ```

- **컬럼명 변경**
  ```sql
  -- ✅ DO: 안전한 컬럼명 변경
  DO $$
  BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'articles' AND column_name = 'original_url') THEN
      ALTER TABLE articles RENAME COLUMN original_url TO article_url;
    END IF;
  END $$;
  ```

## **쿼리 패턴**

- **효율적인 검색**
  ```sql
  -- ✅ DO: 인덱스 활용한 검색
  SELECT * FROM articles 
  WHERE published_at >= NOW() - INTERVAL '7 days'
  AND status = 'collected'
  ORDER BY published_at DESC
  LIMIT 20;
  
  -- 출연자 검색
  SELECT * FROM articles 
  WHERE '김지원' = ANY(cast_members)
  AND published_at >= NOW() - INTERVAL '30 days';
  
  -- 키워드 검색
  SELECT * FROM articles 
  WHERE keywords && ARRAY['나는솔로', '연애']
  ORDER BY published_at DESC;
  ```

- **클러스터링 쿼리**
  ```sql
  -- ✅ DO: 클러스터별 기사 조회
  WITH cluster_stats AS (
    SELECT cluster_id, COUNT(*) as article_count
    FROM articles 
    WHERE cluster_id IS NOT NULL
    GROUP BY cluster_id
  )
  SELECT a.*, cs.article_count
  FROM articles a
  JOIN cluster_stats cs ON a.cluster_id = cs.cluster_id
  WHERE a.published_at >= NOW() - INTERVAL '24 hours'
  ORDER BY cs.article_count DESC, a.published_at DESC;
  ```

## **데이터 정리**

- **오래된 데이터 아카이빙**
  ```sql
  -- ✅ DO: 30일 이상 된 데이터 아카이빙
  UPDATE articles 
  SET status = 'archived'
  WHERE published_at < NOW() - INTERVAL '30 days'
  AND status IN ('collected', 'processed');
  ```

- **중복 데이터 정리**
  ```sql
  -- ✅ DO: 중복 URL 정리 (최신 것만 유지)
  DELETE FROM articles a1
  USING articles a2
  WHERE a1.article_url = a2.article_url
  AND a1.created_at < a2.created_at;
  ```

## **성능 모니터링**

- **쿼리 성능 확인**
  ```sql
  -- ✅ DO: 쿼리 실행 계획 분석
  EXPLAIN (ANALYZE, BUFFERS) 
  SELECT * FROM articles 
  WHERE published_at >= NOW() - INTERVAL '7 days'
  ORDER BY published_at DESC;
  ```

- **인덱스 사용률 확인**
  ```sql
  -- ✅ DO: 인덱스 효율성 모니터링
  SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch
  FROM pg_stat_user_indexes 
  WHERE schemaname = 'public' AND tablename = 'articles'
  ORDER BY idx_scan DESC;
  ```