# 나는솔로 뉴스 허브 프로젝트 가이드

> 상세 규칙은 `playbook.mdc`를 참고하세요.

## **시스템 개요**
자동화된 뉴스 수집 및 표시 시스템으로, Edge Functions가 주기적으로 네이버 뉴스 API에서 데이터를 수집하여 Supabase DB에 저장하고, Next.js 웹앱을 통해 사용자에게 표시합니다.

## **프로젝트 구조**
```
src/
├── app/                    # App Router 페이지
│   ├── api/feed/          # 뉴스 피드 API
│   ├── page.tsx           # 메인 페이지 (뉴스 그리드)
│   └── layout.tsx         # 레이아웃
├── components/ui/         # UI 컴포넌트
│   └── NewsCard.tsx       # 뉴스 카드
├── hooks/                 # 커스텀 훅
│   └── useNews.ts         # 뉴스 데이터 훅
└── lib/                   # 유틸리티
    ├── types.ts           # 타입 정의
    ├── supabase.ts        # Supabase 클라이언트
    └── utils.ts           # 유틸리티 함수
```

## **데이터 흐름**
```
네이버 뉴스 API → Edge Functions → Supabase DB → Next.js 웹앱 → 사용자
```

## **핵심 기능**
- **자동 뉴스 수집**: Edge Functions가 주기적으로 실행
- **출연자 추출**: 정규식으로 한국어 이름 패턴 매칭
- **중복 제거**: URL 기반 중복 방지
- **필터링**: 출연자별, 날짜별 필터링
- **페이지네이션**: 대량 데이터 효율적 표시

## **기술 스택**
- **Frontend**: Next.js 15.4.6 App Router + TypeScript + Tailwind CSS
- **Backend**: Supabase Edge Functions + PostgreSQL
- **External API**: 네이버 뉴스 검색 API
- **Deployment**: Vercel + Supabase

## **색상 시스템**
- **출연자 태그**: `bg-pink-100 text-pink-800`
- **키워드 태그**: `bg-blue-100 text-blue-800`
- **메인 브랜드**: `bg-pink-600`
- **배경**: `bg-gray-50`

## **개발 원칙**
1. **실제 데이터만 사용**: 더미데이터 사용 금지
2. **자동화 우선**: 수동 작업 최소화
3. **사용자 중심**: 직관적인 인터페이스
4. **확장 가능**: 미래 기능 고려

## **키워드 설정**
- **표준 키워드**: `['나는솔로', '나는 솔로', '나솔']`
- **검색 범위**: 최신 뉴스 10개씩
- **정렬**: 날짜순 (최신순)

## **데이터 처리 단계**
1. **네이버 API 호출** → 2. **HTML 정규화** → 3. **출연자 추출** → 4. **중복 제거** → 5. **DB 저장**

## 임베딩 기반 중복 기사 차단(최근 24시간 비교)
- **목적**: 수집 시점에 “최근 24시간” 기사와 비교해 중복이면 저장을 건너뛴다.
- **범위**: 수집 파이프라인(scheduled-news-fetch)에서 저장 직전 한 번만 검사.
- **모델**: 채팅 모델 없이 임베딩 전용 모델 1개 사용(예: OpenAI text-embedding-3-small). 다국어 지원, 저비용.
- **임계치**: 코사인 유사도 기준 값으로 판정(기본 0.93, 데이터 보며 0.90~0.95 튜닝).
- **환경 변수**: `OPENAI_API_KEY`(혹은 선택한 임베딩 제공자 키)만 필요.
- **스키마(권장)**: `embedding vector(1536)` 컬럼과 pgvector 인덱스(IVFFLAT, cosine) 추가.
- **운영 정책**: 중복이면 저장 스킵, 비중복이면 본문과 함께 임베딩 저장(다음 비교에 활용).


## **API 응답 형식**
```typescript
{
  success: boolean;
  data: NewsArticle[];
  total: number;
  pagination: {
    limit: number;
    offset: number;
    hasMore: boolean;
  }
}
```

## **뉴스 기사 타입**
```typescript
interface NewsArticle {
  id: string;
  title: string;
  article_url: string;
  source: string;
  published_at: string;
  summary?: string;
  keywords?: string[];
  cast_members?: string[];
  cluster_id?: string;
  hash: string;
}
```

description:
globs:
alwaysApply: false
---

## 배포 규칙(간단)
- Edge Functions 파일(`supabase/functions/**/*.ts`)을 수정하면 즉시 배포한다.
- DB 마이그레이션(`supabase/migrations/*.sql`) 추가/수정 시 즉시 적용한다.
- 기본 순서: MCP로 실행 가능하면 MCP 우선 → 불가 시 CLI 명령어 안내.
- 상세 규칙은 `deploy-on-change.mdc`를 따른다.
