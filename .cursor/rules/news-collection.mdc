---
description: 뉴스 수집 및 데이터 처리 로직 가이드라인
globs: supabase/functions/**/collect*.ts, app/lib/news*.ts, **/*news*.ts
alwaysApply: true
---

# News Collection Guidelines

## **외부 API 호출**

- **네이버 뉴스 API 호출**
  ```typescript
  // ✅ DO: 표준 네이버 API 호출 패턴
  const response = await fetch(`https://openapi.naver.com/v1/search/news.json?query=${encodeURIComponent(keyword)}&display=20&sort=date`, {
    headers: {
      'X-Naver-Client-Id': clientId,
      'X-Naver-Client-Secret': clientSecret,
    },
  });

  if (!response.ok) {
    console.error(`네이버 API 오류 (${keyword}):`, response.status, response.statusText);
    continue; // 다음 키워드 처리
  }
  ```

- **에러 처리 및 재시도**
  ```typescript
  // ✅ DO: 키워드별 독립적 에러 처리
  for (const keyword of keywords) {
    try {
      // API 호출 로직
    } catch (error) {
      console.error(`키워드 '${keyword}' 수집 오류:`, error);
      continue; // 다른 키워드는 계속 처리
    }
  }
  ```

## **데이터 정규화**

- **HTML 태그 제거**
  ```typescript
  // ✅ DO: HTML 태그 안전하게 제거
  const cleanTitle = item.title.replace(/<[^>]*>/g, '');
  const cleanSummary = item.description.replace(/<[^>]*>/g, '').substring(0, 200);
  ```

- **날짜 처리**
  ```typescript
  // ✅ DO: UTC 타임스탬프로 변환
  const published_at = new Date(item.pubDate).toISOString();
  ```

## **중복 제거**

- **URL 기반 중복 제거**
  ```typescript
  // ✅ DO: Set을 사용한 중복 URL 추적
  const seenUrls = new Set<string>();
  
  for (const item of data.items) {
    const articleUrl = item.originallink || item.link;
    
    if (seenUrls.has(articleUrl)) {
      console.log(`중복 URL 건너뛰기: ${articleUrl}`);
      continue;
    }
    seenUrls.add(articleUrl);
    
    // 기사 처리 로직
  }
  ```

## **키워드 관리**

- **표준 키워드 배열**
  ```typescript
  // ✅ DO: 나는솔로 관련 표준 키워드
  const keywords = ['나는솔로', '나는 솔로', '나솔'];
  
  // ✅ DO: 키워드별 결과 로깅
  console.log(`키워드 '${keyword}' 검색 결과:`, data.total, '개');
  ```

## **출연자 추출**

- **패턴 매칭**
  ```typescript
  // ✅ DO: 한국어 이름 패턴 매칭
  function extractCastMembers(text: string): string[] {
    const castMembers: string[] = [];
    const patterns = [
      /[가-힣]{2,4}\s*씨/g,
      /[가-힣]{2,4}\s*님/g,
    ];
    
    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        castMembers.push(...matches.map(m => m.replace(/\s*(씨|님)/g, '')));
      }
    });
    
    return [...new Set(castMembers)]; // 중복 제거
  }
  ```

## **해시 생성**

- **URL 기반 해시**
  ```typescript
  // ✅ DO: SHA-256 해시 생성
  async function generateHash(url: string): Promise<string> {
    const encoder = new TextEncoder();
    const data = encoder.encode(url);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  }
  ```

## **로깅 및 모니터링**

- **상세 로깅**
  ```typescript
  // ✅ DO: 각 단계별 상세 로깅
  console.log(`키워드 '${keyword}' 검색 시작`);
  console.log(`네이버 API 응답 상태 (${keyword}):`, response.status);
  console.log('총 수집된 기사 수:', allArticles.length);
  console.log('데이터베이스 저장 완료:', data?.length, '개');
  ```